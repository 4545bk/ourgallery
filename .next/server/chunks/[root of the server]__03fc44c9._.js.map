{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Biruh/our-gallery/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport dbConnect, { User } from \"../../../,,.lib/mongodb\"; // Fixed from ../../../../lib/mongodb\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconsole.log(\"NextAuth route loaded\");\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        username: { label: \"Username\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        console.log(\"Authorizing:\", credentials.username);\r\n        try {\r\n          await dbConnect();\r\n          const user = await User.findOne({ username: credentials.username });\r\n          if (!user || !user.password) {\r\n            console.log(\"No user or password:\", credentials.username);\r\n            return null;\r\n          }\r\n          const isValid = await bcrypt.compare(credentials.password, user.password);\r\n          if (!isValid) {\r\n            console.log(\"Invalid password:\", credentials.username);\r\n            return null;\r\n          }\r\n          console.log(\"Authorized:\", user.username);\r\n          return { id: user._id, username: user.username };\r\n        } catch (error) {\r\n          console.error(\"Authorize error:\", error);\r\n          throw error;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      console.log(\"Session callback:\", token);\r\n      session.user.username = token.username || session.user.name;\r\n      return session;\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        console.log(\"JWT callback:\", user);\r\n        token.username = user.username;\r\n      }\r\n      return token;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/posts\",\r\n  },\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;;AAEA;;;;;;AAEA,QAAQ,GAAG,CAAC;AAEL,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAO;gBAC5C,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,QAAQ,GAAG,CAAC,gBAAgB,YAAY,QAAQ;gBAChD,IAAI;oBACF,MAAM;oBACN,MAAM,OAAO,MAAM,KAAK,OAAO,CAAC;wBAAE,UAAU,YAAY,QAAQ;oBAAC;oBACjE,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;wBAC3B,QAAQ,GAAG,CAAC,wBAAwB,YAAY,QAAQ;wBACxD,OAAO;oBACT;oBACA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;oBACxE,IAAI,CAAC,SAAS;wBACZ,QAAQ,GAAG,CAAC,qBAAqB,YAAY,QAAQ;wBACrD,OAAO;oBACT;oBACA,QAAQ,GAAG,CAAC,eAAe,KAAK,QAAQ;oBACxC,OAAO;wBAAE,IAAI,KAAK,GAAG;wBAAE,UAAU,KAAK,QAAQ;oBAAC;gBACjD,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,oBAAoB;oBAClC,MAAM;gBACR;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,GAAG,CAAC,qBAAqB;YACjC,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,IAAI;YAC3D,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,QAAQ,GAAG,CAAC,iBAAiB;gBAC7B,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}