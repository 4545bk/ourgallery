{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Biruh/our-gallery/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"Please define MONGODB_URI in .env.local\");\r\n}\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n  if (cached.conn) {\r\n    console.log(\"Using cached MongoDB connection\");\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n    console.log(\"Connecting to MongoDB:\", MONGODB_URI.replace(/:.*@/, \":****@\"));\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      console.log(\"MongoDB connected successfully\");\r\n      return mongoose;\r\n    }).catch((error) => {\r\n      console.error(\"MongoDB connection error:\", error);\r\n      throw error;\r\n    });\r\n  }\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  password: String,\r\n  googleId: String,\r\n  bio: { type: String, default: \"\" },\r\n  friends: [{ type: mongoose.Schema.Types.ObjectId, ref: \"User\" }], // Added friends field\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\nconst eventSchema = new mongoose.Schema({\r\n  title: String,\r\n  date: String,\r\n  time: String,\r\n  votes: [String],\r\n});\r\n\r\nconst postSchema = new mongoose.Schema({\r\n  text: { type: String, required: true },\r\n  username: { type: String, required: true },\r\n  imageUrl: { type: String }, // Add this field\r\n  likes: { type: Number, default: 0 },\r\n  likedBy: [{ type: String }],\r\n  comments: [{\r\n    text: String,\r\n    username: String,\r\n    createdAt: { type: Date, default: Date.now },\r\n  }],\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\n\r\nconst User = mongoose.models.User || mongoose.model(\"User\", userSchema);\r\nconst Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\nconst Post = mongoose.models.Post || mongoose.model(\"Post\", postSchema);\r\n\r\nexport { User, Event, Post };\r\nexport default dbConnect;"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QACA,QAAQ,GAAG,CAAC,0BAA0B,YAAY,OAAO,CAAC,QAAQ;QAClE,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT,GAAG,KAAK,CAAC,CAAC;YACR,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,MAAM;QACR;IACF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACvD,UAAU;IACV,UAAU;IACV,KAAK;QAAE,MAAM;QAAQ,SAAS;IAAG;IACjC,SAAS;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAO;KAAE;IAChE,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;QAAC;KAAO;AACjB;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,UAAU;QAAE,MAAM;IAAO;IACzB,OAAO;QAAE,MAAM;QAAQ,SAAS;IAAE;IAClC,SAAS;QAAC;YAAE,MAAM;QAAO;KAAE;IAC3B,UAAU;QAAC;YACT,MAAM;YACN,UAAU;YACV,WAAW;gBAAE,MAAM;gBAAM,SAAS,KAAK,GAAG;YAAC;QAC7C;KAAE;IACF,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;AAGA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;AAC5D,MAAM,QAAQ,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS;AAC/D,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;;uCAG7C","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Biruh/our-gallery/app/api/events/vote/route.js"],"sourcesContent":["import dbConnect, { Event } from \"../../../../lib/mongodb\";\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    await dbConnect();\r\n    const { eventId, userName } = await request.json();\r\n\r\n    const event = await Event.findById(eventId);\r\n    if (!event) {\r\n      return new Response(JSON.stringify({ error: \"Event not found\" }), {\r\n        status: 404,\r\n      });\r\n    }\r\n\r\n    if (!event.votes.includes(userName)) {\r\n      event.votes.push(userName);\r\n      await event.save();\r\n    }\r\n\r\n    return new Response(JSON.stringify(event), { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"POST /api/events/vote error:\", error);\r\n    return new Response(JSON.stringify({ error: \"Failed to vote\" }), {\r\n      status: 500,\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAS,AAAD;QACd,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEhD,MAAM,QAAQ,MAAM,gHAAA,CAAA,QAAK,CAAC,QAAQ,CAAC;QACnC,IAAI,CAAC,OAAO;YACV,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAkB,IAAI;gBAChE,QAAQ;YACV;QACF;QAEA,IAAI,CAAC,MAAM,KAAK,CAAC,QAAQ,CAAC,WAAW;YACnC,MAAM,KAAK,CAAC,IAAI,CAAC;YACjB,MAAM,MAAM,IAAI;QAClB;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,QAAQ;YAAE,QAAQ;QAAI;IAC3D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAiB,IAAI;YAC/D,QAAQ;QACV;IACF;AACF","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}