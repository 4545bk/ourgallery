{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Biruh/our-gallery/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"Please define MONGODB_URI in .env.local\");\r\n}\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n  if (cached.conn) {\r\n    console.log(\"Using cached MongoDB connection\");\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n    console.log(\"Connecting to MongoDB:\", MONGODB_URI.replace(/:.*@/, \":****@\"));\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      console.log(\"MongoDB connected successfully\");\r\n      return mongoose;\r\n    }).catch((error) => {\r\n      console.error(\"MongoDB connection error:\", error);\r\n      throw error;\r\n    });\r\n  }\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  password: String,\r\n  googleId: String,\r\n  bio: { type: String, default: \"\" },\r\n  friends: [{ type: mongoose.Schema.Types.ObjectId, ref: \"User\" }], // Added friends field\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\nconst eventSchema = new mongoose.Schema({\r\n  title: String,\r\n  date: String,\r\n  time: String,\r\n  votes: [String],\r\n});\r\n\r\nconst postSchema = new mongoose.Schema({\r\n  text: { type: String, required: true },\r\n  username: { type: String, required: true },\r\n  imageUrl: { type: String }, // Add this field\r\n  likes: { type: Number, default: 0 },\r\n  likedBy: [{ type: String }],\r\n  comments: [{\r\n    text: String,\r\n    username: String,\r\n    createdAt: { type: Date, default: Date.now },\r\n  }],\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\n\r\nconst User = mongoose.models.User || mongoose.model(\"User\", userSchema);\r\nconst Event = mongoose.models.Event || mongoose.model(\"Event\", eventSchema);\r\nconst Post = mongoose.models.Post || mongoose.model(\"Post\", postSchema);\r\n\r\nexport { User, Event, Post };\r\nexport default dbConnect;"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,QAAQ,GAAG,CAAC;QACZ,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QACA,QAAQ,GAAG,CAAC,0BAA0B,YAAY,OAAO,CAAC,QAAQ;QAClE,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT,GAAG,KAAK,CAAC,CAAC;YACR,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,MAAM;QACR;IACF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACvD,UAAU;IACV,UAAU;IACV,KAAK;QAAE,MAAM;QAAQ,SAAS;IAAG;IACjC,SAAS;QAAC;YAAE,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAO;KAAE;IAChE,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;QAAC;KAAO;AACjB;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,UAAU;QAAE,MAAM;IAAO;IACzB,OAAO;QAAE,MAAM;QAAQ,SAAS;IAAE;IAClC,SAAS;QAAC;YAAE,MAAM;QAAO;KAAE;IAC3B,UAAU;QAAC;YACT,MAAM;YACN,UAAU;YACV,WAAW;gBAAE,MAAM;gBAAM,SAAS,KAAK,GAAG;YAAC;QAC7C;KAAE;IACF,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;AAGA,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;AAC5D,MAAM,QAAQ,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS;AAC/D,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;;uCAG7C","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Biruh/our-gallery/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport dbConnect, { User } from \"../../../../lib/mongodb\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconsole.log(\"NextAuth route loaded\");\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        username: { label: \"Username\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        console.log(\"Authorizing:\", credentials.username);\r\n        try {\r\n          await dbConnect();\r\n          const user = await User.findOne({ username: credentials.username });\r\n          if (!user || !user.password) {\r\n            console.log(\"No user or password:\", credentials.username);\r\n            return null;\r\n          }\r\n          const isValid = await bcrypt.compare(credentials.password, user.password);\r\n          if (!isValid) {\r\n            console.log(\"Invalid password:\", credentials.username);\r\n            return null;\r\n          }\r\n          console.log(\"Authorized:\", user.username);\r\n          return { id: user._id.toString(), username: user.username };\r\n        } catch (error) {\r\n          console.error(\"Authorize error:\", error);\r\n          throw error;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      console.log(\"Session callback:\", token);\r\n      if (token) {\r\n        session.user.id = token.sub || token.id; // Ensure ID is set\r\n        session.user.username = token.username || session.user.name?.replace(/\\s+/g, \"\").toLowerCase();\r\n      }\r\n      return session;\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        console.log(\"JWT callback:\", user);\r\n        token.id = user.id; // Store ID in token\r\n        token.username = user.username;\r\n      }\r\n      return token;\r\n    },\r\n    async signIn({ user, account, profile }) {\r\n      if (account.provider === \"google\") {\r\n        await dbConnect();\r\n        const existingUser = await User.findOne({ googleId: profile.sub });\r\n        if (!existingUser) {\r\n          const newUsername = profile.name?.replace(/\\s+/g, \"\").toLowerCase() || profile.email.split(\"@\")[0];\r\n          const newUser = await User.create({\r\n            username: newUsername,\r\n            googleId: profile.sub,\r\n            bio: \"\",\r\n          });\r\n          user.id = newUser._id.toString();\r\n          user.username = newUsername;\r\n        } else {\r\n          user.id = existingUser._id.toString();\r\n          user.username = existingUser.username;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/posts\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Biruh/our-gallery/app/api/posts/%5Bid%5D/like/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport dbConnect, { Post } from \"../../../../../lib/mongodb\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"../../../auth/[...nextauth]/route\";\r\n\r\nexport async function POST(request, { params }) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n\r\n  await dbConnect();\r\n  const { id } = params;\r\n  const username = session.user.username;\r\n\r\n  const post = await Post.findById(id);\r\n  if (!post) return NextResponse.json({ error: \"Post not found\" }, { status: 404 });\r\n\r\n  if (post.likedBy.includes(username)) {\r\n    return NextResponse.json({ error: \"Already liked\" }, { status: 400 });\r\n  }\r\n\r\n  const updatedPost = await Post.findByIdAndUpdate(\r\n    id,\r\n    { $inc: { likes: 1 }, $push: { likedBy: username } },\r\n    { new: true }\r\n  );\r\n\r\n  return NextResponse.json(updatedPost);\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAO,EAAE,EAAE,MAAM,EAAE;IAC5C,MAAM,UAAU,MAAM,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE,mJAAA,CAAA,cAAW;IAClD,IAAI,CAAC,SAAS,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAe,GAAG;QAAE,QAAQ;IAAI;IAEhF,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAS,AAAD;IACd,MAAM,EAAE,EAAE,EAAE,GAAG;IACf,MAAM,WAAW,QAAQ,IAAI,CAAC,QAAQ;IAEtC,MAAM,OAAO,MAAM,gHAAA,CAAA,OAAI,CAAC,QAAQ,CAAC;IACjC,IAAI,CAAC,MAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAiB,GAAG;QAAE,QAAQ;IAAI;IAE/E,IAAI,KAAK,OAAO,CAAC,QAAQ,CAAC,WAAW;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACrE;IAEA,MAAM,cAAc,MAAM,gHAAA,CAAA,OAAI,CAAC,iBAAiB,CAC9C,IACA;QAAE,MAAM;YAAE,OAAO;QAAE;QAAG,OAAO;YAAE,SAAS;QAAS;IAAE,GACnD;QAAE,KAAK;IAAK;IAGd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}