{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Biruh/our-gallery/app/api/telegram/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n\r\nexport async function POST(request) {\r\n  const { message } = await request.json();\r\n  const botToken = process.env.TELEGRAM_BOT_TOKEN;\r\n  const chatId = process.env.TELEGRAM_CHAT_ID;\r\n\r\n  // Get current time in GMT+3\r\n  const now = new Date();\r\n  const gmtPlus3Offset = 3 * 60 * 60 * 1000; // 3 hours in milliseconds\r\n  const gmtPlus3Time = new Date(now.getTime() + gmtPlus3Offset);\r\n  \r\n  // Format time as \"3/28/2025 2:25 PM\"\r\n  const formattedTime = gmtPlus3Time.toLocaleString(\"en-US\", {\r\n    timeZone: \"UTC\", // Base time is UTC, offset applied manually\r\n    month: \"numeric\",\r\n    day: \"numeric\",\r\n    year: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"2-digit\",\r\n    hour12: true,\r\n  });\r\n\r\n  // Combine time and message\r\n  const fullMessage = `[${formattedTime}] ${message}`;\r\n\r\n  console.log(\"=== Telegram API Call ===\");\r\n  console.log(\"TELEGRAM_BOT_TOKEN:\", botToken);\r\n  console.log(\"TELEGRAM_CHAT_ID from .env:\", chatId);\r\n  console.log(\"Message to send:\", fullMessage);\r\n  console.log(\"Target chat_id:\", chatId);\r\n  console.log(\"========================\");\r\n\r\n  if (!botToken || !chatId) {\r\n    console.error(\"Missing Telegram config:\", { botToken, chatId });\r\n    return NextResponse.json({ error: \"Telegram configuration missing\" }, { status: 500 });\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `https://api.telegram.org/bot${botToken}/sendMessage`,\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          chat_id: chatId,\r\n          text: fullMessage,\r\n        }),\r\n      }\r\n    );\r\n\r\n    const result = await response.json();\r\n    if (!response.ok) throw new Error(`Telegram API error: ${result.description}`);\r\n    console.log(\"Telegram message sent successfully:\", result);\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error(\"Telegram error:\", error.message);\r\n    return NextResponse.json({ error: error.message }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAO;IAChC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;IACtC,MAAM,WAAW,QAAQ,GAAG,CAAC,kBAAkB;IAC/C,MAAM,SAAS,QAAQ,GAAG,CAAC,gBAAgB;IAE3C,4BAA4B;IAC5B,MAAM,MAAM,IAAI;IAChB,MAAM,iBAAiB,IAAI,KAAK,KAAK,MAAM,0BAA0B;IACrE,MAAM,eAAe,IAAI,KAAK,IAAI,OAAO,KAAK;IAE9C,qCAAqC;IACrC,MAAM,gBAAgB,aAAa,cAAc,CAAC,SAAS;QACzD,UAAU;QACV,OAAO;QACP,KAAK;QACL,MAAM;QACN,MAAM;QACN,QAAQ;QACR,QAAQ;IACV;IAEA,2BAA2B;IAC3B,MAAM,cAAc,CAAC,CAAC,EAAE,cAAc,EAAE,EAAE,SAAS;IAEnD,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,uBAAuB;IACnC,QAAQ,GAAG,CAAC,+BAA+B;IAC3C,QAAQ,GAAG,CAAC,oBAAoB;IAChC,QAAQ,GAAG,CAAC,mBAAmB;IAC/B,QAAQ,GAAG,CAAC;IAEZ,IAAI,CAAC,YAAY,CAAC,QAAQ;QACxB,QAAQ,KAAK,CAAC,4BAA4B;YAAE;YAAU;QAAO;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MACrB,CAAC,4BAA4B,EAAE,SAAS,YAAY,CAAC,EACrD;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBACnB,SAAS;gBACT,MAAM;YACR;QACF;QAGF,MAAM,SAAS,MAAM,SAAS,IAAI;QAClC,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,OAAO,WAAW,EAAE;QAC7E,QAAQ,GAAG,CAAC,uCAAuC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB,MAAM,OAAO;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}